{"version":3,"sources":["reducers/loading.ts","actions/types.ts","reducers/query.ts","reducers/posts.ts","reducers/index.ts","helpers/api.ts","components/Filter.tsx","actions/index.ts","components/Button.tsx","components/PostList.tsx","App.tsx","store.ts","index.tsx"],"names":["loadingReducer","loading","action","type","queryReducer","query","postsReducer","posts","getLoading","state","getPosts","getQuery","getVisiblePosts","filter","post","title","includes","rootReducer","combineReducers","getAll","url","fetch","then","res","json","getAppData","a","todosFromServer","usersFromServer","commentsFromServer","map","user","find","id","userId","comments","comment","postId","Filter","dispatch","useDispatch","useSelector","className","value","onChange","target","setQuery","Button","text","disabled","onClick","status","PostList","key","App","length","postsFromServer","initPosts","finally","store","createStore","composeWithDevTools","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.650b5171.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\nimport { FINISH_LOADING, START_LOADING } from '../actions/types';\n\nconst loadingReducer = (loading = false, action: AnyAction): boolean => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n    case FINISH_LOADING:\n      return false;\n    default:\n      return loading;\n  }\n};\n\nexport default loadingReducer;\n","export const START_LOADING = 'START_LOADING';\nexport const FINISH_LOADING = 'FINISH_LOADING';\nexport const INIT_POSTS = 'INIT_POSTS';\nexport const SET_QUERY = 'SET_QUERY';\n","import { AnyAction } from 'redux';\nimport { SET_QUERY } from '../actions/types';\n\nconst queryReducer = (query = '', action: AnyAction): string => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n    default:\n      return query;\n  }\n};\n\nexport default queryReducer;\n","import { AnyAction } from 'redux';\nimport { INIT_POSTS } from '../actions/types';\n\n\nconst postsReducer = (posts: Post[] = [], action: AnyAction): Post[] => {\n  switch (action.type) {\n    case INIT_POSTS:\n      return action.posts;\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","import { combineReducers } from 'redux';\nimport loadingReducer from './loading';\nimport queryReducer from './query';\nimport postsReducer from './posts';\n\n// Selectors\nexport const getLoading = (state: RootState) => state.loading;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getQuery = (state: RootState) => state.query;\n\n\nexport const getVisiblePosts = (state: RootState) => {\n  return state.posts\n    .filter(post => post.title.includes(state.query));\n};\n\n\nexport const rootReducer = combineReducers({\n  loading: loadingReducer,\n  posts: postsReducer,\n  query: queryReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","const apiUrl = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/';\n\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(`${apiUrl}${url}.json`).then(res => res.json());\n};\n\nexport const getPosts = () => getAll<Post>('/posts');\nexport const getUsers = () => getAll<User>('/users');\nexport const getComments = () => getAll<Comments>('/comments');\n\n\nexport const getAppData = async () => {\n  const todosFromServer = await getPosts();\n  const usersFromServer = await getUsers();\n  const commentsFromServer = await getComments();\n\n\n  return todosFromServer.map((post) => {\n    return {\n      ...post,\n      user: usersFromServer.find(user => user.id === post.userId),\n      comments: commentsFromServer.filter((comment: Comments) => comment.postId === post.id),\n    };\n  });\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setQuery } from '../actions';\nimport { getQuery } from '../reducers';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const query = useSelector(getQuery);\n\n  return (\n    <div className=\"form-group mt-4\">\n      <input\n        className=\"form-control\"\n        type=\"text\"\n        value={query}\n        onChange={({ target }) => dispatch(setQuery(target.value))}\n      />\n    </div>\n  );\n};\n\n\nexport default Filter;\n","import {\n  START_LOADING,\n  FINISH_LOADING, INIT_POSTS, SET_QUERY,\n} from './types';\n\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\n\nexport const initPosts = (posts: Post[]) => ({\n  type: INIT_POSTS,\n  posts,\n});\n\n\nexport const setQuery = (query: string) => ({\n  type: SET_QUERY,\n  query,\n});\n","import React from 'react';\n\n\ntype Pros = {\n  text: string;\n  disabled?: boolean;\n  status?: string;\n  onClick: () => void;\n};\n\nconst Button: React.FC<Pros> = ({\n  text, disabled = false, onClick, status = 'primary',\n}) => {\n  return (\n    <button\n      className={`btn btn-outline-${status}`}\n      type=\"button\"\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getVisiblePosts } from '../reducers';\n\n\nconst PostList: React.FC = () => {\n  const posts = useSelector(getVisiblePosts);\n\n  return (\n    <ul>\n      {posts.map(({ title, id }) => (\n        <li key={id}>{title}</li>\n      ))}\n    </ul>\n  );\n};\n\nexport default PostList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './App.scss';\n\nimport { finishLoading, initPosts, startLoading } from './actions';\nimport { getLoading, getPosts } from './reducers';\n\nimport { getAppData } from './helpers/api';\nimport Filter from './components/Filter';\nimport Button from './components/Button';\nimport PostList from './components/PostList';\n\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(getPosts);\n  const loading = useSelector(getLoading);\n\n\n  const initData = () => {\n    dispatch(startLoading());\n\n    getAppData()\n      .then(postsFromServer => {\n        dispatch(initPosts(postsFromServer));\n      })\n      .finally(() => {\n        dispatch(finishLoading());\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"text-center\">\n          Redux list of posts\n          {posts.length}\n        </h1>\n        {!posts.length\n        && (\n          <Button\n            text={loading ? 'Loading...' : 'Init data'}\n            disabled={loading}\n            onClick={initData}\n          />\n        )}\n        {posts.length > 0 && <Filter />}\n        {posts.length > 0 && <PostList />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { rootReducer } from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}